name: ZenPacks.crosse.OpenBSD

zProperties:
    DEFAULTS:
        category: OpenBSD
        type: boolean

    zPfIgnoreLabels: {}
    zPfIgnoreTables: {}

classes:
    OpenBSDDevice:
        base: [zenpacklib.Device]
        label: OpenBSD

    PacketFilter:
        base: [zenpacklib.Component]
        label: Packet Filter
        plural_label: Packet Filter
        properties:
            pfHostId:
                label: Host ID
                order: 1
            pfRunning:
                label: Running
                type: bool
                renderer: Zenoss.render.checkbox
                order: 2
            pfDebug:
                label: Debug Level
                type: int
                enum: {0: "Emergency", 1: "Alert", 2: "Critical", 3: "Error", 4: "Warning", 5: "Notice", 6: "Info", 7: "Debug"}
                order: 3
            pfRuntime:
                label: Runtime
                type: int
                order: 4
            pfCntMatch:
                label: Matches
                type: int
                details_display: false
                grid_display: false
            pfCntBadOffset:
                label: Bad Offsets
                type: int
                details_display: false
                grid_display: false
            pfCntFragment:
                label: Fragments
                type: int
                details_display: false
                grid_display: false
            pfCntShort:
                label: Short Packets
                type: int
                details_display: false
                grid_display: false
            pfCntNormalize:
                label: Normalized Packets
                type: int
                details_display: false
                grid_display: false
            pfCntMemory:
                label: Dropped - Memory Pressure
                type: int
                details_display: false
                grid_display: false
            pfCntTimestamp:
                label: Dropped - Improper Timestamp
                type: int
                details_display: false
                grid_display: false
            pfCntCongestion:
                label: Dropped - Congestion
                type: int
                details_display: false
                grid_display: false
            pfCntIpOption:
                label: Dropped - IP Options
                type: int
                details_display: false
                grid_display: false
            pfCntProtoCksum:
                label: Dropped - Checksum
                type: int
                details_display: false
                grid_display: false
            pfCntStateMismatch:
                label: Dropped - State Mismatch
                type: int
                details_display: false
                grid_display: false
            pfCntStateInsert:
                label: Dropped - State Insert Error
                type: int
                details_display: false
                grid_display: false
            pfCntStateLimit:
                label: Dropped - State Limit
                type: int
                details_display: false
                grid_display: false
            pfCntSrcLimit:
                label: Dropped - Source Limit
                type: int
                details_display: false
                grid_display: false
            pfCntSynproxy:
                label: Dropped - Synproxy
                type: int
                details_display: false
                grid_display: false
            pfCntTranslate:
                label: Dropped - NAT
                type: int
                details_display: false
                grid_display: false
            pfCntNoRoute:
                label: Dropped - No Route
                type: int
                details_display: false
                grid_display: false
            pfStateCount:
                label: State Count
                type: int
                details_display: false
                grid_display: false
            pfStateSearches:
                label: State Searches
                type: int
                details_display: false
                grid_display: false
            pfStateInserts:
                label: State Inserts
                type: int
                details_display: false
                grid_display: false
            pfStateRemovals:
                label: State Removals
                type: int
                details_display: false
                grid_display: false
            pfLogIfName:
                label: Log Interface
                order: 5
            pfLogIfIpBytesIn:
                label: Log Interface - IPv4 Bytes In
                type: int
                renderer: Zenoss.render.bytesString
                details_display: false
                grid_display: false
            pfLogIfIpBytesOut:
                label: Log Interface - IPv4 Bytes Out
                type: int
                renderer: Zenoss.render.bytesString
                details_display: false
                grid_display: false
            pfLogIfIpPktsInPass:
                label: Log Interface - IPv4 Packets In (Pass)
                type: int
                details_display: false
                grid_display: false
            pfLogIfIpPktsInDrop:
                label: Log Interface - IPv4 Packets In (Drop)
                type: int
                details_display: false
                grid_display: false
            pfLogIfIpPktsOutPass:
                label: Log Interface - IPv4 Packets Out (Pass)
                type: int
                details_display: false
                grid_display: false
            pfLogIfIpPktsOutDrop:
                label: Log Interface - IPv4 Packets Out (Drop)
                type: int
                details_display: false
                grid_display: false
            pfLogIfIp6BytesIn:
                label: Log Interface - IPv6 Bytes In
                type: int
                renderer: Zenoss.render.bytesString
                details_display: false
                grid_display: false
            pfLogIfIp6BytesOut:
                label: Log Interface - IPv6 Bytes Out
                type: int
                renderer: Zenoss.render.bytesString
                details_display: false
                grid_display: false
            pfLogIfIp6PktsInPass:
                label: Log Interface - IPv6 Packets In (Pass)
                type: int
                details_display: false
                grid_display: false
            pfLogIfIp6PktsInDrop:
                label: Log Interface - IPv6 Packets In (Drop)
                type: int
                details_display: false
                grid_display: false
            pfLogIfIp6PktsOutPass:
                label: Log Interface - IPv6 Packets Out (Pass)
                type: int
                details_display: false
                grid_display: false
            pfLogIfIp6PktsOutDrop:
                label: Log Interface - IPv6 Packets Out (Drop)
                type: int
                details_display: false
                grid_display: false
            pfSrcTrackCount:
                label: Source Tracking Entries
                type: int
                details_display: false
                grid_display: false
            pfSrcTrackSearches:
                label: Source Tracking Searches
                type: int
                details_display: false
                grid_display: false
            pfSrcTrackInserts:
                label: Source Tracking Inserts
                type: int
                details_display: false
                grid_display: false
            pfSrcTrackRemovals:
                label: Source Tracking Removals
                type: int
                details_display: false
                grid_display: false

    PacketFilterInterface:
        base: [zenpacklib.Component]
        label: Packet Filter Interface

        properties:
            pfIfType:
                label: Type
                type: int
                enum: {0: "Group", 1: "Interface", 2: "Removed"}
                order: 1
            pfIfIndex:
                label: Index
                type: int
                grid_display: false
            pfIfRefs:
                label: State/Source Track References
                short_label: State Refs
                type: int
                order: 2
            pfIfRules:
                label: Rule References
                short_label: Rule Refs
                type: int
                order: 3
            pfIfIn4PassPkts:
                label: IPv4 Incoming Packets Passed
                type: int
                grid_display: false
            pfIfIn4PassBytes:
                label: IPv4 Incoming Bytes Passed
                type: int
                renderer: Zenoss.render.bytesString
                grid_display: false
            pfIfIn4BlockPkts:
                label: IPv4 Incoming Packets Blocked
                type: int
                grid_display: false
            pfIfIn4BlockBytes:
                label: IPv4 Incoming Bytes Blocked
                type: int
                renderer: Zenoss.render.bytesString
                grid_display: false
            pfIfOut4PassPkts:
                label: IPv4 Outgoing Packets Passed
                type: int
                grid_display: false
            pfIfOut4PassBytes:
                label: IPv4 Outgoing Bytes Passed
                type: int
                renderer: Zenoss.render.bytesString
                grid_display: false
            pfIfOut4BlockPkts:
                label: IPv4 Outgoing Packets Blocked
                type: int
                grid_display: false
            pfIfOut4BlockBytes:
                label: IPv4 Outgoing Bytes Blocked
                type: int
                renderer: Zenoss.render.bytesString
                grid_display: false
            pfIfIn6PassPkts:
                label: IPv6 Incoming Packets Passed
                type: int
                grid_display: false
            pfIfIn6PassBytes:
                label: IPv6 Incoming Bytes Passed
                type: int
                renderer: Zenoss.render.bytesString
                grid_display: false
            pfIfIn6BlockPkts:
                label: IPv6 Incoming Packets Blocked
                type: int
                grid_display: false
            pfIfIn6BlockBytes:
                label: IPv6 Incoming Bytes Blocked
                type: int
                renderer: Zenoss.render.bytesString
                grid_display: false
            pfIfOut6PassPkts:
                label: IPv6 Outgoing Packets Passed
                type: int
                grid_display: false
            pfIfOut6PassBytes:
                label: IPv6 Outgoing Bytes Passed
                type: int
                renderer: Zenoss.render.bytesString
                grid_display: false
            pfIfOut6BlockPkts:
                label: IPv6 Outgoing Packets Blocked
                type: int
                grid_display: false
            pfIfOut6BlockBytes:
                label: IPv6 Outgoing Bytes Blocked
                renderer: Zenoss.render.bytesString
                type: int
                grid_display: false

    PacketFilterTable:
        base: [zenpacklib.Component]
        label: Packet Filter Table

        properties:
            DEFAULTS:
                type: int
                details_display: false
                grid_display: false

            pfTblName:
                label: Name
                type: string
                order: 1
                details_display: true
                grid_display: true
            pfTblAddresses:
                label: Addresses
                order: 2
                details_display: true
                grid_display: true
            pfTblAnchorRefs:
                label: Anchor References
                short_label: Anchor Refs
                order: 3
                details_display: true
                grid_display: true
            pfTblRuleRefs:
                label: Rule References
                short_label: Rule Refs
                order: 4
                details_display: true
                grid_display: true
            pfTblEvalsMatch:
                label: Table Evaluations (Matched)
            pfTblEvalsNoMatch:
                label: Table Evaluations (Not Matched)
            pfTblInPassPkts:
                label: Packets Passed In
            pfTblInPassBytes:
                label: Bytes Passed In
                renderer: Zenoss.render.bytesString
            pfTblInBlockPkts:
                label: Packets Blocked In
            pfTblInBlockBytes:
                label: Bytes Blocked In
                renderer: Zenoss.render.bytesString
            pfTblInXPassPkts:
                label: Packets Passed In (Address No Longer Listed)
            pfTblInXPassBytes:
                label: Bytes Passed In (Address No Longer Listed)
                renderer: Zenoss.render.bytesString
            pfTblOutPassPkts:
                label: Packets Passed Out
            pfTblOutPassBytes:
                label: Bytes Passed Out
                renderer: Zenoss.render.bytesString
            pfTblOutBlockPkts:
                label: Packets Blocked Out
            pfTblOutBlockBytes:
                label: Bytes Blocked Out
                renderer: Zenoss.render.bytesString
            pfTblOutXPassPkts:
                label: Packets Passed Out (Address No Longer Listed)
            pfTblOutXPassBytes:
                label: Bytes Passed Out (Address No Longer Listed)
                renderer: Zenoss.render.bytesString
            pfTblStatsCleared:
                label: Stats Last Cleared
            pfTblInMatchPkts:
                label: Packets Matched In
            pfTblInMatchBytes:
                label: Bytes Matched In
                renderer: Zenoss.render.bytesString
            pfTblOutMatchPkts:
                label: Packets Matched Out
            pfTblOutMatchBytes:
                label: Bytes Matched Out
                renderer: Zenoss.render.bytesString

    PacketFilterLabel:
        base: [zenpacklib.Component]
        label: Packet Filter Label

        properties:
            DEFAULTS:
                type: int
                grid_display: false

            pfLabelEvals:
                label: Rule Evaluations
            pfLabelPkts:
                label: Matched Packets
                order: 1
                grid_display: true
            pfLabelBytes:
                label: Matched Bytes
                renderer: Zenoss.render.bytesString
                order: 2
                grid_display: true
            pfLabelInPkts:
                label: Matched Incoming Packets
            pfLabelInBytes:
                label: Matched Incoming Bytes
                renderer: Zenoss.render.bytesString
            pfLabelOutPkts:
                label: Matched Outgoing Packets
            pfLabelOutBytes:
                label: Matched Outgoing Bytes
                renderer: Zenoss.render.bytesString
            pfLabelTotalStates:
                label: Total States


class_relationships:
    - OpenBSDDevice(packetFilters) 1:MC (openBSDDevice)PacketFilter
    - OpenBSDDevice(packetFilterInterfaces) 1:MC (openBSDDevice)PacketFilterInterface
    - OpenBSDDevice(packetFilterTables) 1:MC (openBSDDevice)PacketFilterTable
    - OpenBSDDevice(packetFilterLabels) 1:MC (openBSDDevice)PacketFilterLabel

device_classes:
    /Server/OpenBSD:
        zProperties:
            zPythonClass: ZenPacks.crosse.OpenBSD.OpenBSDDevice
            zInterfaceMapIgnoreNames: "^pflog.*"
            zCollectorPlugins:
                - crosse.snmp.OpenBSD.PacketFilter
                - crosse.snmp.OpenBSD.PacketFilterInterface
                - crosse.snmp.OpenBSD.PacketFilterLabel
                - crosse.snmp.OpenBSD.PacketFilterTable
                - zenoss.snmp.CpuMap
                - zenoss.snmp.DeviceMap
                - zenoss.snmp.HRFileSystemMap
                - zenoss.snmp.InterfaceMap
                - zenoss.snmp.IpServiceMap
                - zenoss.snmp.NewDeviceMap
                - zenoss.snmp.RouteMap
                - zenoss.snmp.SnmpV3EngineIdMap

        templates:
            PacketFilter:
                targetPythonClass: ZenPacks.crosse.OpenBSD.PacketFilter
                description: PF monitoring for OpenBSD devices.

                datasources:
                    pfRunning:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.1.1.0
                        datapoints:
                            pfRunning:
                                rrdtype: GAUGE
                    pfRuntime:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.1.2.0
                        datapoints:
                            pfRuntime:
                                rrdtype: GAUGE
                    pfDebug:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.1.3.0
                        datapoints:
                            pfDebug:
                                rrdtype: GAUGE
                    pfCntMatch:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.1.0
                        datapoints:
                            pfCntMatch:
                                rrdtype: DERIVE
                    pfCntBadOffset:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.2.0
                        datapoints:
                            pfCntBadOffset:
                                rrdtype: DERIVE
                    pfCntFragment:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.3.0
                        datapoints:
                            pfCntFragment:
                                rrdtype: DERIVE
                    pfCntShort:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.4.0
                        datapoints:
                            pfCntShort:
                                rrdtype: DERIVE
                    pfCntNormalize:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.5.0
                        datapoints:
                            pfCntNormalize:
                                rrdtype: DERIVE
                    pfCntMemory:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.6.0
                        datapoints:
                            pfCntMemory:
                                rrdtype: DERIVE
                    pfCntTimestamp:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.7.0
                        datapoints:
                            pfCntTimestamp:
                                rrdtype: DERIVE
                    pfCntCongestion:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.8.0
                        datapoints:
                            pfCntCongestion:
                                rrdtype: DERIVE
                    pfCntIpOption:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.9.0
                        datapoints:
                            pfCntIpOption:
                                rrdtype: DERIVE
                    pfCntProtoCksum:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.10.0
                        datapoints:
                            pfCntProtoCksum:
                                rrdtype: DERIVE
                    pfCntStateMismatch:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.11.0
                        datapoints:
                            pfCntStateMismatch:
                                rrdtype: DERIVE
                    pfCntStateInsert:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.12.0
                        datapoints:
                            pfCntStateInsert:
                                rrdtype: DERIVE
                    pfCntStateLimit:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.13.0
                        datapoints:
                            pfCntStateLimit:
                                rrdtype: DERIVE
                    pfCntSrcLimit:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.14.0
                        datapoints:
                            pfCntSrcLimit:
                                rrdtype: DERIVE
                    pfCntSynproxy:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.15.0
                        datapoints:
                            pfCntSynproxy:
                                rrdtype: DERIVE
                    pfCntTranslate:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.16.0
                        datapoints:
                            pfCntTranslate:
                                rrdtype: DERIVE
                    pfCntNoRoute:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.2.17.0
                        datapoints:
                            pfCntNoRoute:
                                rrdtype: DERIVE
                    pfStateCount:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.3.1.0
                        datapoints:
                            pfStateCount:
                                rrdtype: GAUGE
                    pfStateSearches:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.3.2.0
                        datapoints:
                            pfStateSearches:
                                rrdtype: DERIVE
                    pfStateInserts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.3.3.0
                        datapoints:
                            pfStateInserts:
                                rrdtype: DERIVE
                    pfStateRemovals:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.3.4.0
                        datapoints:
                            pfStateRemovals:
                                rrdtype: DERIVE
                    pfLogIfName:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.1.0
                        datapoints:
                            pfLogIfName:
                                rrdtype: DERIVE
                    pfLogIfIpBytesIn:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.2.0
                        datapoints:
                            pfLogIfIpBytesIn:
                                rrdtype: DERIVE
                    pfLogIfIpBytesOut:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.3.0
                        datapoints:
                            pfLogIfIpBytesOut:
                                rrdtype: DERIVE
                    pfLogIfIpPktsInPass:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.4.0
                        datapoints:
                            pfLogIfIpPktsInPass:
                                rrdtype: DERIVE
                    pfLogIfIpPktsInDrop:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.5.0
                        datapoints:
                            pfLogIfIpPktsInDrop:
                                rrdtype: DERIVE
                    pfLogIfIpPktsOutPass:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.6.0
                        datapoints:
                            pfLogIfIpPktsOutPass:
                                rrdtype: DERIVE
                    pfLogIfIpPktsOutDrop:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.7.0
                        datapoints:
                            pfLogIfIpPktsOutDrop:
                                rrdtype: DERIVE
                    pfLogIfIp6BytesIn:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.8.0
                        datapoints:
                            pfLogIfIp6BytesIn:
                                rrdtype: DERIVE
                    pfLogIfIp6BytesOut:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.9.0
                        datapoints:
                            pfLogIfIp6BytesOut:
                                rrdtype: DERIVE
                    pfLogIfIp6PktsInPass:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.10.0
                        datapoints:
                            pfLogIfIp6PktsInPass:
                                rrdtype: DERIVE
                    pfLogIfIp6PktsInDrop:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.11.0
                        datapoints:
                            pfLogIfIp6PktsInDrop:
                                rrdtype: DERIVE
                    pfLogIfIp6PktsOutPass:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.12.0
                        datapoints:
                            pfLogIfIp6PktsOutPass:
                                rrdtype: DERIVE
                    pfLogIfIp6PktsOutDrop:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.4.13.0
                        datapoints:
                            pfLogIfIp6PktsOutDrop:
                                rrdtype: DERIVE
                    pfSrcTrackCount:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.5.1.0
                        datapoints:
                            pfLogIfIp6PktsOutDrop:
                                rrdtype: DERIVE
                    pfSrcTrackSearches:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.5.2.0
                        datapoints:
                            pfSrcTrackSearches:
                                rrdtype: DERIVE
                    pfSrcTrackInserts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.5.3.0
                        datapoints:
                            pfSrcTrackInserts:
                                rrdtype: DERIVE
                    pfSrcTrackRemovals:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.5.4.0
                        datapoints:
                            pfSrcTrackRemovals:
                                rrdtype: DERIVE

                graphs:
                    States:
                        units: states
                        graphpoints:
                            States:
                                dpName: pfStateCount_pfStateCount
                                format: "%8.2lf%s"

                    State Operations:
                        units: ops/sec
                        graphpoints:
                            Searches:
                                dpName: pfStateSearches_pfStateSearches
                                format: "%8.2lf%s"
                            Inserts:
                                dpName: pfStateInserts_pfStateInserts
                                format: "%8.2lf%s"
                            Removals:
                                dpName: pfStateRemovals_pfStateRemovals
                                format: "%8.2lf%s"

                    Dropped Packets:
                        units: packets/sec
                        graphpoints:
                            "Memory Limit":
                                dpName: pfCntMemory_pfCntMemory
                                format: "%6.2lf%s"
                            "Bad Timestamp":
                                dpName: pfCntTimestamp_pfCntTimestamp
                                format: "%6.2lf%s"
                            "Congestion":
                                dpName: pfCntCongestion_pfCntCongestion
                                format: "%6.2lf%s"
                            "IP Option":
                                dpName: pfCntIpOption_pfCntIpOption
                                format: "%6.2lf%s"
                            "Bad Checksum":
                                dpName: pfCntProtoCksum_pfCntProtoCksum
                                format: "%6.2lf%s"
                            "State Mismatch":
                                dpName: pfCntStateMismatch_pfCntStateMismatch
                                format: "%6.2lf%s"
                            "State Insert":
                                dpName: pfCntStateInsert_pfCntStateInsert
                                format: "%6.2lf%s"
                            "Rule State Lim.":
                                dpName: pfCntStateLimit_pfCntStateLimit
                                format: "%6.2lf%s"
                            "Src State Lim.":
                                dpName: pfCntSrcLimit_pfCntSrcLimit
                                format: "%6.2lf%s"
                            "Synproxy":
                                dpName: pfCntSynproxy_pfCntSynproxy
                                format: "%6.2lf%s"
                            "NAT":
                                dpName: pfCntTranslate_pfCntTranslate
                                format: "%6.2lf%s"
                            "No Route":
                                dpName: pfCntNoRoute_pfCntNoRoute
                                format: "%6.2lf%s"

                    Log Interface - Bytes:
                        units: bytes
                        graphpoints:
                            "IPv4 In":
                                dpName: pfLogIfIpBytesIn_pfLogIfIpBytesIn
                                format: "%6.2lf%s"
                            "IPv4 Out":
                                dpName: pfLogIfIpBytesOut_pfLogIfIpBytesOut
                                format: "%6.2lf%s"
                            "IPv6 In":
                                dpName: pfLogIfIp6BytesIn_pfLogIfIp6BytesIn
                                format: "%6.2lf%s"
                            "IPv6 Out":
                                dpName: pfLogIfIp6BytesOut_pfLogIfIp6BytesOut
                                format: "%6.2lf%s"

                    "Log Interface - Packets":
                        units: bytes
                        graphpoints:
                            "IPv4 Pkts In (Pass)":
                                dpName: pfLogIfIpPktsInPass_pfLogIfIpPktsInPass
                                format: "%6.2lf%s"
                            "IPv4 Pkts In (Drop)":
                                dpName: pfLogIfIpPktsInDrop_pfLogIfIpPktsInDrop
                                format: "%6.2lf%s"
                            "IPv4 Pkts Out (Pass)":
                                dpName: pfLogIfIpPktsOutPass_pfLogIfIpPktsOutPass
                                format: "%6.2lf%s"
                            "IPv4 Pkts Out (Drop)":
                                dpName: pfLogIfIpPktsOutDrop_pfLogIfIpPktsOutDrop
                                format: "%6.2lf%s"
                            "IPv6 Pkts In (Pass)":
                                dpName: pfLogIfIp6PktsInPass_pfLogIfIp6PktsInPass
                                format: "%6.2lf%s"
                            "IPv6 Pkts In (Drop)":
                                dpName: pfLogIfIp6PktsInDrop_pfLogIfIp6PktsInDrop
                                format: "%6.2lf%s"
                            "IPv6 Pkts Out (Pass)":
                                dpName: pfLogIfIp6PktsOutPass_pfLogIfIp6PktsOutPass
                                format: "%6.2lf%s"
                            "IPv6 Pkts Out (Drop)":
                                dpName: pfLogIfIp6PktsOutDrop_pfLogIfIp6PktsOutDrop
                                format: "%6.2lf%s"

                    "Source Tracking Table - Entries":
                        units: entries
                        graphpoints:
                            Entries:
                                dpName: pfSrcTrackCount_pfSrcTrackCount
                                format: "%6.2lf%s"

                    "Source Tracking Table - Operations":
                        units: ops/sec
                        graphpoints:
                            Searches:
                                dpName: pfSrcTrackSearches_pfSrcTrackSearches
                                format: "%6.2lf%s"
                            Inserts:
                                dpName: pfSrcTrackInserts_pfSrcTrackInserts
                                format: "%6.2lf%s"
                            Removals:
                                dpName: pfSrcTrackRemovals_pfSrcTrackRemovals
                                format: "%6.2lf%s"

            PacketFilterInterface:
                targetPythonClass: ZenPacks.crosse.OpenBSD.PacketFilterInterface
                description: PF interface monitoring for OpenBSD devices.

                datasources:
                    pfIfRefs:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.4
                        datapoints:
                            pfIfRefs:
                                rrdtype: GAUGE
                    pfIfRules:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.5
                        datapoints:
                            pfIfRules:
                                rrdtype: GAUGE
                    pfIfIn4PassPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.6
                        datapoints:
                            pfIfIn4PassPkts:
                                rrdtype: DERIVE
                    pfIfIn4PassBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.7
                        datapoints:
                            pfIfIn4PassBytes:
                                rrdtype: DERIVE
                    pfIfIn4BlockPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.8
                        datapoints:
                            pfIfIn4BlockPkts:
                                rrdtype: DERIVE
                    pfIfIn4BlockBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.9
                        datapoints:
                            pfIfIn4BlockBytes:
                                rrdtype: DERIVE
                    pfIfOut4PassPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.10
                        datapoints:
                            pfIfOut4PassPkts:
                                rrdtype: DERIVE
                    pfIfOut4PassBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.11
                        datapoints:
                            pfIfOut4PassBytes:
                                rrdtype: DERIVE
                    pfIfOut4BlockPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.12
                        datapoints:
                            pfIfOut4BlockPkts:
                                rrdtype: DERIVE
                    pfIfOut4BlockBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.13
                        datapoints:
                            pfIfOut4BlockBytes:
                                rrdtype: DERIVE
                    pfIfIn6PassPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.14
                        datapoints:
                            pfIfIn6PassPkts:
                                rrdtype: DERIVE
                    pfIfIn6PassBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.15
                        datapoints:
                            pfIfIn6PassBytes:
                                rrdtype: DERIVE
                    pfIfIn6BlockPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.16
                        datapoints:
                            pfIfIn6BlockPkts:
                                rrdtype: DERIVE
                    pfIfIn6BlockBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.17
                        datapoints:
                            pfIfIn6BlockBytes:
                                rrdtype: DERIVE
                    pfIfOut6PassPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.17
                        datapoints:
                            pfIfOut6PassPkts:
                                rrdtype: DERIVE
                    pfIfOut6PassBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.19
                        datapoints:
                            pfIfOut6PassBytes:
                                rrdtype: DERIVE
                    pfIfOut6BlockPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.20
                        datapoints:
                            pfIfOut6BlockPkts:
                                rrdtype: DERIVE
                    pfIfOut6BlockBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.8.128.1.21
                        datapoints:
                            pfIfOut6BlockBytes:
                                rrdtype: DERIVE

                graphs:
                    References:
                        units: references
                        graphpoints:
                            State Refs:
                                dpName: pfIfRefs_pfIfRefs
                                format: "%6.2lf%s"
                            Rule Refs:
                                dpName: pfIfRules_pfIfRules
                                format: "%6.2lf%s"
                    IPv4 Packets:
                        units: packets/sec
                        graphpoints:
                            Passed In:
                                dpName: pfIfIn4PassPkts_pfIfIn4PassPkts
                                format: "%6.2lf%s"
                            Passed Out:
                                dpName: pfIfOut4PassPkts_pfIfOut4PassPkts
                                format: "%6.2lf%s"
                            Blocked In:
                                dpName: pfIfOut4PassPkts_pfIfOut4PassPkts
                                format: "%6.2lf%s"
                            Blocked Out:
                                dpName: pfIfOut4PassPkts_pfIfOut4PassPkts
                                format: "%6.2lf%s"

                    IPv6 Packets:
                        units: packets/sec
                        graphpoints:
                            Passed In:
                                dpName: pfIfIn6PassPkts_pfIfIn6PassPkts
                                format: "%6.2lf%s"
                            Passed Out:
                                dpName: pfIfOut6PassPkts_pfIfOut6PassPkts
                                format: "%6.2lf%s"
                            Blocked In:
                                dpName: pfIfOut6PassPkts_pfIfOut6PassPkts
                                format: "%6.2lf%s"
                            Blocked Out:
                                dpName: pfIfOut6PassPkts_pfIfOut6PassPkts
                                format: "%6.2lf%s"

                    IPv4 Bytes:
                        units: bytes/sec
                        graphpoints:
                            Passed In:
                                dpName: pfIfIn4PassBytes_pfIfIn4PassBytes
                                format: "%6.2lf%s"
                            Passed Out:
                                dpName: pfIfOut4PassBytes_pfIfOut4PassBytes
                                format: "%6.2lf%s"
                            Blocked In:
                                dpName: pfIfOut4PassBytes_pfIfOut4PassBytes
                                format: "%6.2lf%s"
                            Blocked Out:
                                dpName: pfIfOut4PassBytes_pfIfOut4PassBytes
                                format: "%6.2lf%s"

                    IPv6 Bytes:
                        units: bytes/sec
                        graphpoints:
                            Passed In:
                                dpName: pfIfIn6PassBytes_pfIfIn6PassBytes
                                format: "%6.2lf%s"
                            Passed Out:
                                dpName: pfIfOut6PassBytes_pfIfOut6PassBytes
                                format: "%6.2lf%s"
                            Blocked In:
                                dpName: pfIfOut6PassBytes_pfIfOut6PassBytes
                                format: "%6.2lf%s"
                            Blocked Out:
                                dpName: pfIfOut6PassBytes_pfIfOut6PassBytes
                                format: "%6.2lf%s"

            PacketFilterTable:
                targetPythonClass: ZenPacks.crosse.OpenBSD.PacketFilterTable
                description: PF table monitoring for OpenBSD devices.

                datasources:
                    pfTblAddresses:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.3
                        datapoints:
                            pfTblAddresses:
                            rrdtype: GAUGE
                    pfTblAnchorRefs:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.4
                        datapoints:
                            pfTblAnchorRefs:
                            rrdtype: GAUGE
                    pfTblRuleRefs:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.5
                        datapoints:
                            pfTblRuleRefs:
                            rrdtype: GAUGE
                    pfTblEvalsMatch:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.6
                        datapoints:
                            pfTblEvalsMatch:
                            rrdtype: DERIVE
                    pfTblEvalsNoMatch:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.7
                        datapoints:
                            pfTblEvalsNoMatch:
                            rrdtype: DERIVE
                    pfTblInPassPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.8
                        datapoints:
                            pfTblInPassPkts:
                            rrdtype: DERIVE
                    pfTblInPassBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.9
                        datapoints:
                            pfTblInPassBytes:
                            rrdtype: DERIVE
                    pfTblInBlockPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.10
                        datapoints:
                            pfTblInBlockPkts:
                            rrdtype: DERIVE
                    pfTblInBlockBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.11
                        datapoints:
                            pfTblInBlockBytes:
                            rrdtype: DERIVE
                    pfTblInXPassPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.12
                        datapoints:
                            pfTblInXPassPkts:
                            rrdtype: DERIVE
                    pfTblInXPassBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.13
                        datapoints:
                            pfTblInXPassBytes:
                            rrdtype: DERIVE
                    pfTblOutPassPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.14
                        datapoints:
                            pfTblOutPassPkts:
                            rrdtype: DERIVE
                    pfTblOutPassBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.15
                        datapoints:
                            pfTblOutPassBytes:
                            rrdtype: DERIVE
                    pfTblOutBlockPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.16
                        datapoints:
                            pfTblOutBlockPkts:
                            rrdtype: DERIVE
                    pfTblOutBlockBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.17
                        datapoints:
                            pfTblOutBlockBytes:
                            rrdtype: DERIVE
                    pfTblOutXPassPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.18
                        datapoints:
                            pfTblOutXPassPkts:
                            rrdtype: DERIVE
                    pfTblOutXPassBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.19
                        datapoints:
                            pfTblOutXPassBytes:
                            rrdtype: DERIVE
                    pfTblStatsCleared:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.20
                        datapoints:
                            pfTblStatsCleared:
                            rrdtype: GAUGE
                    pfTblInMatchPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.21
                        datapoints:
                            pfTblInMatchPkts:
                            rrdtype: DERIVE
                    pfTblInMatchBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.22
                        datapoints:
                            pfTblInMatchBytes:
                            rrdtype: DERIVE
                    pfTblOutMatchPkts:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.23
                        datapoints:
                            pfTblOutMatchPkts:
                            rrdtype: DERIVE
                    pfTblOutMatchBytes:
                        type: SNMP
                        component: "${here/id}"
                        oid: 1.3.6.1.4.1.30155.1.9.128.1.24
                        datapoints:
                            pfTblOutMatchBytes:
                            rrdtype: DERIVE

                graphs:
                    Addresses:
                        units: addresses
                        graphpoints:
                            Addresses:
                                dpName: pfTblAddresses_pfTblAddresses
                                format: "%6.2lf%s"
                    References:
                        units: references
                        graphpoints:
                            Anchor Refs:
                                dpName: pfTblAnchorRefs_pfTblAnchorRefs
                                format: "%6.2lf%s"
                            Rule Refs:
                                dpName: pfTblRuleRefs_pfTblRuleRefs
                                format: "%6.2lf%s"
                    Evaluations:
                        units: evals/sec
                        graphpoints:
                            Matched:
                                dpName: pfTblEvalsMatch_pfTblEvalsMatch
                            Not Matched:
                                dpName: pfTblEvalsNoMatch_pfTblEvalsNoMatch
                    Packets - Passed:
                        units: packets/sec
                        graphpoints:
                            In:
                                dpName: pfTblInPassPkts_pfTblInPassPkts
                                format: "%6.2lf%s"
                            In (No Addr):
                                dpName: pfTblInXPassPkts_pfTblInXPassPkts
                                format: "%6.2lf%s"
                            Out:
                                dpName: pfTblOutPassPkts_pfTblOutPassPkts
                                format: "%6.2lf%s"
                    Packets - Blocked:
                        units: packets/sec
                        graphpoints:
                            In:
                                dpName: pfTblInBlockPkts_pfTblInBlockPkts
                                format: "%6.2lf%s"
                            Out:
                                dpName: pfTblOutBlockPkts_pfTblOutBlockPkts
                                format: "%6.2lf%s"
                    Bytes - Passed:
                        units: bytes/sec
                        graphpoints:
                            In:
                                dpName: pfTblInPassBytes_pfTblInPassBytes
                                format: "%6.2lf%s"
                            In (No Addr):
                                dpName: pfTblInXPassBytes_pfTblInXPassBytes
                                format: "%6.2lf%s"
                            Out:
                                dpName: pfTblOutPassBytes_pfTblOutPassBytes
                                format: "%6.2lf%s"
                    Bytes - Blocked:
                        units: bytes/sec
                        graphpoints:
                            In:
                                dpName: pfTblInBlockBytes_pfTblInBlockBytes
                                format: "%6.2lf%s"
                            Out:
                                dpName: pfTblOutBlockBytes_pfTblOutBlockBytes
                                format: "%6.2lf%s"
                    Packets - Matched:
                        units: packets/sec
                        graphpoints:
                            Match In:
                                dpName: pfTblInMatchPkts_pfTblInMatchPkts
                                format: "%6.2lf%s"
                            Match Out:
                                dpName: pfTblOutMatchPkts_pfTblOutMatchPkts
                                format: "%6.2lf%s"
                    Bytes - Matched:
                        units: bytes/sec
                        graphpoints:
                            Match In:
                                dpName: pfTblInMatchBytes_pfTblInMatchBytes
                                format: "%6.2lf%s"
                            Match Out:
                                dpName: pfTblOutMatchBytes_pfTblOutMatchBytes
                                format: "%6.2lf%s"

            PacketFilterLabel:
                targetPythonClass: ZenPacks.crosse.OpenBSD.PacketFilterLabel
                description: PF label monitoring for OpenBSD devices.

                datasources:
                        pfLabelEvals:
                            type: SNMP
                            component: "${here/id}"
                            oid: 1.3.6.1.4.1.30155.1.10.128.1.3
                            datapoints:
                                pfLabelEvals: DERIVE
                        pfLabelPkts:
                            type: SNMP
                            component: "${here/id}"
                            oid: 1.3.6.1.4.1.30155.1.10.128.1.4
                            datapoints:
                                pfLabelPkts: DERIVE
                        pfLabelBytes:
                            type: SNMP
                            component: "${here/id}"
                            oid: 1.3.6.1.4.1.30155.1.10.128.1.5
                            datapoints:
                                pfLabelBytes: DERIVE
                        pfLabelInPkts:
                            type: SNMP
                            component: "${here/id}"
                            oid: 1.3.6.1.4.1.30155.1.10.128.1.6
                            datapoints:
                                pfLabelInPkts: DERIVE
                        pfLabelInBytes:
                            type: SNMP
                            component: "${here/id}"
                            oid: 1.3.6.1.4.1.30155.1.10.128.1.7
                            datapoints:
                                pfLabelInBytes: DERIVE
                        pfLabelOutPkts:
                            type: SNMP
                            component: "${here/id}"
                            oid: 1.3.6.1.4.1.30155.1.10.128.1.8
                            datapoints:
                                pfLabelOutPkts: DERIVE
                        pfLabelOutBytes:
                            type: SNMP
                            component: "${here/id}"
                            oid: 1.3.6.1.4.1.30155.1.10.128.1.9
                            datapoints:
                                pfLabelOutBytes: DERIVE
                        pfLabelTotalStates:
                            type: SNMP
                            component: "${here/id}"
                            oid: 1.3.6.1.4.1.30155.1.10.128.1.10
                            datapoints:
                                pfLabelTotalStates: DERIVE

                graphs:
                    Evaluations:
                        units: evals/sec
                        graphpoints:
                            Addresses:
                                dpName: pfLabelEvals_pfLabelEvals
                                format: "%6.2lf%s"
                    States:
                        units: states
                        graphpoints:
                            Total States:
                                dpName: pfLabelTotalStates_pfLabelTotalStates
                                format: "%6.2lf%s"
                    Packets:
                        units: packets/sec
                        graphpoints:
                            In:
                                dpName: pfLabelInPkts_pfLabelInPkts
                                format: "%6.2lf%s"
                            Out:
                                dpName: pfLabelOutPkts_pfLabelOutPkts
                                format: "%6.2lf%s"
                            Total:
                                dpName: pfLabelPkts_pfLabelPkts
                                format: "%6.2lf%s"
                    Bytes:
                        units: bytes/sec
                        graphpoints:
                            In:
                                dpName: pfLabelInBytes_pfLabelInBytes
                                format: "%6.2lf%s"
                            Out:
                                dpName: pfLabelOutBytes_pfLabelOutBytes
                                format: "%6.2lf%s"
                            Total:
                                dpName: pfLabelBytes_pfLabelBytes
                                format: "%6.2lf%s"
